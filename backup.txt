import random
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_restx import Api, Resource, fields
from collections import OrderedDict

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc://SAAD\\SQLEXPRESS/policies_db?driver=ODBC+Driver+17+for+SQL+Server'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = '1234'
db = SQLAlchemy(app)
ma = Marshmallow(app)
api = Api(app)

# Table


class Policy(db.Model):
    __tablename__ = 'Policy'
    policy_id = db.Column(db.Integer, primary_key=True, nullable=False, autoincrement=True)
    policy_number = db.Column(db.String(50), nullable=False)
    policy_holder_name = db.Column(db.String(100), nullable=False)
    coverage_amount = db.Column(db.Float, nullable=False)
    premium_amount = db.Column(db.Float, nullable=False)

    def __init__(self, policy_number, policy_holder_name, coverage_amount, premium_amount):
        self.policy_number = policy_number
        self.policy_holder_name = policy_holder_name
        self.coverage_amount = coverage_amount
        self.premium_amount = premium_amount


class PolicySchema(ma.Schema):
    class Meta:
        fields = ('policy_id', 'policy_number', 'policy_holder_name', 'coverage_amount', 'premium_amount')


policy_schema = PolicySchema()
policies_schema = PolicySchema(many=True)

# Routes


@api.route('/get')
class GetPolicy(Resource):
    def get(self):
        policies = Policy.query.all()

        # Use OrderedDict to maintain the order of fields
        ordered_policies = [OrderedDict(policy_schema.dump(policy)) for policy in policies]

        return jsonify(ordered_policies)


@api.route('/post')
class PostPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount')
    }))
    def post(self):
        policy_number = request.json['policy_number']
        policy_holder_name = request.json['policy_holder_name']
        coverage_amount = request.json['coverage_amount']
        premium_amount = request.json['premium_amount']

        existing_ids = [policy.policy_id for policy in Policy.query.all()]
        policy_id = generate_unique_policy_id(existing_ids)

        policy = Policy(
            policy_number=policy_number,
            policy_holder_name=policy_holder_name,
            coverage_amount=coverage_amount,
            premium_amount=premium_amount
        )

        db.session.add(policy)
        db.session.commit()

        return {'message': 'Policy added to database successfully'}


def generate_unique_policy_id(existing_ids):
    policy_id = random.randint(1, 1000)
    while policy_id in existing_ids:
        policy_id = random.randint(1, 1000)
    return policy_id


@api.route('/put/<int:policy_id>')
class PutPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount')
    }))
    def put(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            policy.policy_number = request.json['policy_number']
            policy.policy_holder_name = request.json['policy_holder_name']
            policy.coverage_amount = request.json['coverage_amount']
            policy.premium_amount = request.json['premium_amount']

            db.session.commit()

            return {'message': 'Policy updated successfully'}


@api.route('/delete/<int:policy_id>')
class DeletePolicy(Resource):
    def delete(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            db.session.delete(policy)
            db.session.commit()

            return {'message': 'Policy deleted successfully'}


if __name__ == "__main__":
    app.run()
-------------------------------------------
import random
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_restx import Api, Resource, fields
from collections import OrderedDict
from flask_pymongo import PyMongo

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc://SAAD\\SQLEXPRESS/policies_db?driver=ODBC+Driver+17+for+SQL+Server'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = '1234'
app.config['MONGO_URI'] = 'mongodb://localhost:27017/mydatabase'

db = SQLAlchemy(app)
ma = Marshmallow(app)
mongo = PyMongo(app)
api = Api(app)

# Table
class Policy(db.Model):
    __tablename__ = 'Policy'
    policy_id = db.Column(db.Integer, primary_key=True, nullable=False, autoincrement=True)
    policy_number = db.Column(db.String(50), nullable=False)
    policy_holder_name = db.Column(db.String(100), nullable=False)
    coverage_amount = db.Column(db.Float, nullable=False)
    premium_amount = db.Column(db.Float, nullable=False)

    def __init__(self, policy_number, policy_holder_name, coverage_amount, premium_amount):
        self.policy_number = policy_number
        self.policy_holder_name = policy_holder_name
        self.coverage_amount = coverage_amount
        self.premium_amount = premium_amount


class PolicySchema(ma.Schema):
    class Meta:
        fields = ('policy_id', 'policy_number', 'policy_holder_name', 'coverage_amount', 'premium_amount')


policy_schema = PolicySchema()
policies_schema = PolicySchema(many=True)

# MongoDB Collection
policy_info_collection = mongo.db.policies_infos

# Routes
@api.route('/get')
class GetPolicy(Resource):
    def get(self):
        include_additional_data = request.args.get('additional_data')  # Check if additional data should be included

        policies_sql = Policy.query.all()
        ordered_policies_sql = [OrderedDict(policy_schema.dump(policy)) for policy in policies_sql]

        if include_additional_data:
            policy_ids = [policy['policy_id'] for policy in ordered_policies_sql]
            policies_mongo = policy_info_collection.find({'policy_id': {'$in': policy_ids}})
            ordered_policies_mongo = [OrderedDict(policy) for policy in policies_mongo]
            return jsonify(ordered_policies_sql + ordered_policies_mongo)
        else:
            return jsonify(ordered_policies_sql)


@api.route('/get-with-additional-data')
class GetPolicyWithAdditionalData(Resource):
    def get(self):
        policies = Policy.query.all()

        def get_additional_data_from_mongodb(policies):
            policy_ids = [policy.policy_id for policy in policies]
            # Implement the logic to query the MongoDB collection and retrieve additional data based on policy_ids
            # Return the retrieved additional data
            # Example: Retrieve additional data from MongoDB collection named 'policies_infos'
            additional_data = policy_info_collection.find({"policy_id": {"$in": policy_ids}})
            return additional_data

        additional_data_param = request.args.get('additional_data')
        if additional_data_param and additional_data_param.lower() == 'true':
            # Retrieve additional information from MongoDB collection
            additional_data = get_additional_data_from_mongodb(policies)
            # Join additional data with policies
            joined_data = join_additional_data_with_policies(policies, additional_data)
            return jsonify(joined_data)

        # Return policies without additional information
        return jsonify(policies)


@api.route('/post')
class PostPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount')
    }))
    def post(self):
        policy_number = request.json['policy_number']
        policy_holder_name = request.json['policy_holder_name']
        coverage_amount = request.json['coverage_amount']
        premium_amount = request.json['premium_amount']

        existing_ids = [policy.policy_id for policy in Policy.query.all()]
        policy_id = generate_unique_policy_id(existing_ids)

        policy = Policy(
            policy_number=policy_number,
            policy_holder_name=policy_holder_name,
            coverage_amount=coverage_amount,
            premium_amount=premium_amount
        )

        db.session.add(policy)
        db.session.commit()

        # Store additional policy information in MongoDB collection
        policy_info = {
            'policy_id': policy_id,
            'claims_info': request.json.get('claims_info', ''),
            'policy_documents': request.json.get('policy_documents', ''),
            'endorsements': request.json.get('endorsements', '')
        }
        policy_info_collection.insert_one(policy_info)

        return {'message': 'Policy added to databases successfully'}


@api.route('/put/<int:policy_id>')
class PutPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount')
    }))
    def put(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            policy.policy_number = request.json['policy_number']
            policy.policy_holder_name = request.json['policy_holder_name']
            policy.coverage_amount = request.json['coverage_amount']
            policy.premium_amount = request.json['premium_amount']

            db.session.commit()

            # Update additional policy information in MongoDB collection
            policy_info_collection.update_one(
                {'policy_id': policy_id},
                {'$set': {
                    'claims_info': request.json.get('claims_info', ''),
                    'policy_documents': request.json.get('policy_documents', ''),
                    'endorsements': request.json.get('endorsements', '')
                }}
            )

            return {'message': 'Policy updated successfully'}


@api.route('/delete/<int:policy_id>')
class DeletePolicy(Resource):
    def delete(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            db.session.delete(policy)
            db.session.commit()

            # Delete policy information from MongoDB collection
            policy_info_collection.delete_one({'policy_id': policy_id})

            return {'message': 'Policy deleted successfully'}


def generate_unique_policy_id(existing_ids):
    policy_id = random.randint(1, 1000)
    while policy_id in existing_ids:
        policy_id = random.randint(1, 1000)
    return policy_id


if __name__ == "__main__":
    app.run()
---------------------------------------------------------------------------------------
import random
from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_restx import Api, Resource, fields
from collections import OrderedDict
import pymongo
from flask_pymongo import PyMongo


app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mssql+pyodbc://SAAD\\SQLEXPRESS/policies_db?driver=ODBC+Driver+17+for+SQL+Server'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = '1234'
mongo_client = pymongo.MongoClient('mongodb://localhost:27017')
mongo_db = mongo_client['mydatabase']
mongo = PyMongo(app, uri='mongodb://localhost:27017/mydatabase')
policy_info_collection = mongo.db.policies_infos
db = SQLAlchemy(app)
ma = Marshmallow(app)
api = Api(app)


# Table
class Policy(db.Model):
    __tablename__ = 'Policy'
    policy_id = db.Column(db.Integer, primary_key=True, nullable=False, autoincrement=True)
    policy_number = db.Column(db.String(50), nullable=False)
    policy_holder_name = db.Column(db.String(100), nullable=False)
    coverage_amount = db.Column(db.Float, nullable=False)
    premium_amount = db.Column(db.Float, nullable=False)

    def __init__(self, policy_number, policy_holder_name, coverage_amount, premium_amount):
        self.policy_number = policy_number
        self.policy_holder_name = policy_holder_name
        self.coverage_amount = coverage_amount
        self.premium_amount = premium_amount


class PolicySchema(ma.Schema):
    class Meta:
        fields = ('policy_id', 'policy_number', 'policy_holder_name', 'coverage_amount', 'premium_amount')


policy_schema = PolicySchema()
policies_schema = PolicySchema(many=True)


# MongoDB data
class PolicyInfo:
    def __init__(self, policy_id, claims_info, policy_documents):
        self.policy_id = policy_id
        self.claims_info = claims_info
        self.policy_documents = policy_documents


class PolicyInfoSchema(ma.Schema):
    class Meta:
        fields = ('policy_id', 'claims_info', 'policy_documents')


policy_info_schema = PolicyInfoSchema()
policy_infos_schema = PolicyInfoSchema(many=True)


# Routes
@api.route('/get/sql')
class GetSQLPolicy(Resource):
    def get(self):
        policies_sql = Policy.query.all()
        ordered_policies_sql = [OrderedDict(policy_schema.dump(policy)) for policy in policies_sql]
        return {'SQL policies info list': ordered_policies_sql}


@api.route('/get/mongodb')
class GetMongoDBPolicy(Resource):
    def get(self):
        policies_mongo = policy_info_collection.find()
        ordered_policies_mongo = [policy_info_schema.dump(policy) for policy in policies_mongo]
        return {'MongoDB policies info list': ordered_policies_mongo}


@api.route('/get/combined')
class GetCombinedPolicy(Resource):
    def get(self):
        policies_sql = Policy.query.all()
        ordered_policies_sql = [OrderedDict(policy_schema.dump(policy)) for policy in policies_sql]
        policies_mongo = policy_info_collection.find()
        ordered_policies_mongo = [policy_info_schema.dump(policy) for policy in policies_mongo]
        combined_policies = []
        for policy_sql in ordered_policies_sql:
            policy_id = policy_sql['policy_id']
            policy_mongo = next((policy for policy in ordered_policies_mongo if policy['policy_id'] == policy_id), None)
            if policy_mongo:
                combined_policy = {**policy_sql, **policy_mongo}
                combined_policies.append(combined_policy)
        return {'Combined policies info list': combined_policies}



@api.route('/post')
class PostPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount'),
        'claims_info': fields.String(description='Enter Claims Info'),
        'policy_documents': fields.String(description='Enter Policy Documents'),
        'add_to_mongodb': fields.Boolean(description='Add to MongoDB'),

    }))
    def post(self):
        policy_number = request.json['policy_number']
        policy_holder_name = request.json['policy_holder_name']
        coverage_amount = request.json['coverage_amount']
        premium_amount = request.json['premium_amount']
        claims_info = request.json.get('claims_info', None)
        policy_documents = request.json.get('policy_documents', None)
        add_to_mongodb = request.json.get('add_to_mongodb', True)


        existing_ids = [policy.policy_id for policy in Policy.query.all()]
        policy_id = generate_unique_policy_id(existing_ids)

        policy = Policy(
            policy_number=policy_number,
            policy_holder_name=policy_holder_name,
            coverage_amount=coverage_amount,
            premium_amount=premium_amount
        )

        db.session.add(policy)
        db.session.commit()

        if add_to_mongodb:
            policy_info = PolicyInfo(
                policy_id=policy_id,
                claims_info=claims_info,
                policy_documents=policy_documents
            )
            policy_info_collection.insert_one(policy_info_schema.dump(policy_info))

        return {'message': 'Policy added to database successfully'}


def generate_unique_policy_id(existing_ids):
    policy_id = random.randint(1, 1000)
    while policy_id in existing_ids:
        policy_id = random.randint(1, 1000)
    return policy_id


@api.route('/put/<int:policy_id>')
class PutPolicy(Resource):
    @api.expect(api.model('Policy', {
        'policy_number': fields.String(description='Enter Policy Number'),
        'policy_holder_name': fields.String(description='Enter Policy Holder Name'),
        'coverage_amount': fields.Float(description='Enter Coverage Amount'),
        'premium_amount': fields.Float(description='Enter Premium Amount'),
        'claims_info': fields.String(description='Enter Claims Info'),
        'policy_documents': fields.String(description='Enter Policy Documents')
    }))
    def put(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            policy.policy_number = request.json['policy_number']
            policy.policy_holder_name = request.json['policy_holder_name']
            policy.coverage_amount = request.json['coverage_amount']
            policy.premium_amount = request.json['premium_amount']

            db.session.commit()

            policy_info_collection.update_one(
                {'policy_id': policy_id},
                {'$set': {
                    'claims_info': request.json.get('claims_info', policy_info_collection.find_one({'policy_id': policy_id}).get('claims_info')),
                    'policy_documents': request.json.get('policy_documents', policy_info_collection.find_one({'policy_id': policy_id}).get('policy_documents'))
                }}
            )

            return {'message': 'Policy updated successfully'}


@api.route('/delete/<int:policy_id>')
class DeletePolicy(Resource):
    def delete(self, policy_id):
        with app.app_context():
            policy = Policy.query.get(policy_id)
            if not policy:
                return {'message': 'Policy not found'}, 404

            db.session.delete(policy)
            db.session.commit()

            policy_info_collection.delete_one({'policy_id': policy_id})

            return {'message': 'Policy deleted successfully'}


if __name__ == "__main__":
    app.run()
